"use client";
import { useEffect, useState, useRef, useCallback } from "react";
import { supabase } from "@/lib/supabase";
import { motion } from "framer-motion";
import { 
  FaUserCircle, 
  FaQrcode, 
  FaMedal, 
  FaLeaf, 
  FaMapMarkerAlt, 
  FaRobot, 
  FaTimes,
  FaDirections,
  FaTrophy,
  FaClock,
  FaExpand,
  FaCompress
} from 'react-icons/fa';
import { FaClockRotateLeft as FaHistory } from "react-icons/fa6";
import dynamic from "next/dynamic";
import QRScanner from "@/components/QRScanner";
import DashboardChatbot from "@/components/DashboardChatbot";
import ClientOnly from "@/components/ClientOnly";

const MapSection = dynamic(() => import("@/components/MapSection"), { ssr: false, loading: () => <div>Loading map...</div> });

export default function Dashboard() {
  const [user, setUser] = useState<any>(null);
  const [profile, setProfile] = useState<any>(null);
  const [profilePic, setProfilePic] = useState<string | null>(null);
  const [uploading, setUploading] = useState(false);
  const [modalError, setModalError] = useState<string | null>(null);
  const [showProfileModal, setShowProfileModal] = useState(false);
  const [showRedeemModal, setShowRedeemModal] = useState(false);
  const [showItemModal, setShowItemModal] = useState(false);
  const [showScanner, setShowScanner] = useState(false);
  const [pendingHubId, setPendingHubId] = useState<string | null>(null);
  const [pendingHub, setPendingHub] = useState<any>(null);
  const [selectedItems, setSelectedItems] = useState<Record<string, number>>({});
  const [itemSubmitting, setItemSubmitting] = useState(false);
  const [message, setMessage] = useState<string | null>(null);
  const [redeemMessage, setRedeemMessage] = useState<string | null>(null);
  const [userRCoins, setUserRCoins] = useState(0);
  const [history, setHistory] = useState<any[]>([]);
  const [loadingHistory, setLoadingHistory] = useState(false);
  const [rewardHistory, setRewardHistory] = useState<any[]>([]);
  const [loadingRewards, setLoadingRewards] = useState(false);
  const [historyTab, setHistoryTab] = useState('recycling');
  const [leaderboard, setLeaderboard] = useState<any[]>([]);
  const [loadingLeaderboard, setLoadingLeaderboard] = useState(false);
  const [challenges, setChallenges] = useState<any[]>([]);
  const [loadingChallenges, setLoadingChallenges] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);
  
  // Add this new state for map full view
  const [mapFullView, setMapFullView] = useState(false);

  // Your existing useEffects and functions...

  return (
    <main className="min-h-screen bg-gradient-to-br from-green-100 via-green-300 to-green-200 flex flex-col items-center py-8 px-2">
      <div className="w-full max-w-6xl grid grid-cols-1 md:grid-cols-2 gap-8 items-stretch">
        {/* Left Column */}
        <div className="flex flex-col gap-8 h-full">
          {/* User Profile Card */}
          <motion.section 
            initial={{ opacity: 0, y: 20 }} 
            animate={{ opacity: 1, y: 0 }} 
            transition={{ duration: 0.5 }} 
            className="rounded-xl shadow-2xl border border-green-300 bg-gradient-to-br from-green-200 via-green-100 to-blue-100 p-6 flex items-center gap-4 relative overflow-hidden"
            style={{
              boxShadow: '0 8px 32px 0 rgba(34,197,94,0.25), 0 1.5px 8px 0 rgba(0,0,0,0.10)'
            }}
          >
            <div className="w-14 h-14 rounded-full bg-green-500 flex items-center justify-center overflow-hidden">
              {profilePic ? (
                <img src={profilePic} alt="Profile" className="w-14 h-14 rounded-full object-cover border-2 border-green-300" />
              ) : (
                <FaUserCircle className="text-white text-4xl" />
              )}
            </div>
            <div>
              <h2 className="text-2xl font-bold text-green-700">Welcome, {profile?.name || user?.email || "Eco Cycler"}!</h2>
              <p className="text-gray-700 text-sm mt-1">Points: <span className="font-semibold text-green-600">{profile?.points ?? 1230}</span> | Level: <span className="font-semibold text-green-600">{profile?.level ?? "Green Hero"}</span></p>
            </div>
            <button
              onClick={() => setShowScanner(true)}
              className="ml-auto bg-green-600 text-white rounded-full p-4 shadow-lg hover:bg-green-700 transition"
              title="Scan QR Code"
            >
              <FaQrcode className="text-2xl" />
            </button>
          </motion.section>

          {/* Rewards Section */}
          <motion.section
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.1 }}
            className="rounded-xl shadow-2xl border border-green-300 bg-gradient-to-br from-green-200 via-yellow-100 to-blue-100 p-6 flex items-center gap-4 relative overflow-hidden"
            style={{
              boxShadow: '0 8px 32px 0 rgba(34,197,94,0.25), 0 1.5px 8px 0 rgba(0,0,0,0.10)'
            }}
          >
            <div className="w-14 h-14 rounded-full bg-yellow-400 flex items-center justify-center">
              <FaMedal className="text-white text-3xl" />
            </div>
            <div>
              <h2 className="text-xl font-bold text-green-700">R Coins</h2>
              <p className="text-3xl font-bold text-yellow-600">{userRCoins}</p>
            </div>
            <button
              onClick={() => setShowRedeemModal(true)}
              className="ml-auto bg-yellow-500 text-white px-4 py-2 rounded-lg shadow hover:bg-yellow-600 transition"
            >
              Redeem Rewards
            </button>
          </motion.section>

          {/* Leaderboard Section */}
          <motion.section
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.2 }}
            className="rounded-xl shadow-2xl border border-green-300 bg-gradient-to-br from-green-200 via-blue-100 to-purple-100 p-6 relative overflow-hidden"
            style={{
              boxShadow: '0 8px 32px 0 rgba(34,197,94,0.25), 0 1.5px 8px 0 rgba(0,0,0,0.10)'
            }}
          >
            <div className="absolute inset-0 pointer-events-none" style={{
              background: 'rgba(255,255,255,0.18)',
              backdropFilter: 'blur(6px)',
              WebkitBackdropFilter: 'blur(6px)'
            }} />
            <div className="relative z-10">
              <div className="flex items-center gap-2 mb-4">
                <FaTrophy className="text-yellow-500 text-2xl" />
                <h3 className="text-lg font-bold text-green-700">Leaderboard</h3>
              </div>
              {/* Leaderboard content */}
            </div>
          </motion.section>
        </div>

        {/* Right Column */}
        <div className="flex flex-col gap-8">
          {/* Map section */}
          <motion.section 
            initial={{ opacity: 0, y: 30, scale: 0.97 }} 
            animate={{ opacity: 1, y: 0, scale: 1 }} 
            transition={{ duration: 0.9, delay: 0.3, type: 'spring', bounce: 0.18 }} 
            className={`relative rounded-3xl p-6 overflow-hidden border border-green-200 shadow-2xl ${
              mapFullView ? 'fixed inset-0 z-50 m-0 rounded-none' : ''
            }`}
            style={{
              background: 'linear-gradient(135deg, #b9fbc0 0%, #a3c9f9 100%)',
              boxShadow: '0 8px 32px 0 rgba(34,197,94,0.25), 0 1.5px 8px 0 rgba(0,0,0,0.10)'
            }}
          >
            {/* Glassmorphism overlay */}
            <div className="absolute inset-0 pointer-events-none" style={{
              background: 'rgba(255,255,255,0.18)',
              backdropFilter: 'blur(6px)',
              WebkitBackdropFilter: 'blur(6px)'
            }} />
            <div className="flex items-center gap-2 mb-4 relative z-10">
              <FaMapMarkerAlt className="text-green-500 text-2xl drop-shadow-lg animate-bounce" />
              <h3 className="text-lg font-bold text-green-700">Find Nearest Recycling Hub</h3>
              <button 
                onClick={() => setMapFullView(!mapFullView)}
                className="ml-auto text-green-700 text-sm hover:text-green-900 flex items-center gap-1"
              >
                {mapFullView ? (
                  <>
                    <FaCompress className="text-sm" /> Minimize
                  </>
                ) : (
                  <>
                    <FaExpand className="text-sm" /> Expand
                  </>
                )}
              </button>
            </div>
            <div className="overflow-y-auto max-h-[500px] relative z-10">
              <ClientOnly>
                <MapSection />
              </ClientOnly>
            </div>
          </motion.section>

          {/* Only show these sections if mapFullView is false */}