'use client';
import { useState, useRef, useEffect } from 'react';

// Define language options
type Language = 'english' | 'hindi' | 'kannada';

// Prompts in different languages
const promptsByLanguage = {
  english: [
    "Recycling rules?",
    "Glass recycling steps?",
    "Plastic types recycle?",
    "E-waste disposal?",
    "Reduce waste tips?",
    "Nearest recycle center?",
    "Composting how?",
    "Donate old clothes?",
    "Paper recycling?",
    "Metal recycling?"
  ],
  hindi: [
    "‡§∞‡•Ä‡§∏‡§æ‡§á‡§ï‡•ç‡§≤‡§ø‡§Ç‡§ó ‡§®‡§ø‡§Ø‡§Æ?",
    "‡§ï‡§æ‡§Ç‡§ö ‡§∞‡•Ä‡§∏‡§æ‡§á‡§ï‡•ç‡§≤‡§ø‡§Ç‡§ó ‡§ö‡§∞‡§£?",
    "‡§™‡•ç‡§≤‡§æ‡§∏‡•ç‡§ü‡§ø‡§ï ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§∞‡•Ä‡§∏‡§æ‡§á‡§ï‡§≤?",
    "‡§à-‡§ï‡§ö‡§∞‡§æ ‡§®‡§ø‡§™‡§ü‡§æ‡§®?",
    "‡§ï‡§ö‡§∞‡§æ ‡§ï‡§Æ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§ü‡§ø‡§™‡•ç‡§∏?",
    "‡§®‡§ø‡§ï‡§ü‡§§‡§Æ ‡§∞‡•Ä‡§∏‡§æ‡§á‡§ï‡•ç‡§≤‡§ø‡§Ç‡§ó ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞?",
    "‡§ï‡§Æ‡•ç‡§™‡•ã‡§∏‡•ç‡§ü‡§ø‡§Ç‡§ó ‡§ï‡•à‡§∏‡•á ‡§ï‡§∞‡•á‡§Ç?",
    "‡§™‡•Å‡§∞‡§æ‡§®‡•á ‡§ï‡§™‡§°‡§º‡•á ‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç?",
    "‡§ï‡§æ‡§ó‡§ú ‡§∞‡•Ä‡§∏‡§æ‡§á‡§ï‡•ç‡§≤‡§ø‡§Ç‡§ó?",
    "‡§ß‡§æ‡§§‡•Å ‡§∞‡•Ä‡§∏‡§æ‡§á‡§ï‡•ç‡§≤‡§ø‡§Ç‡§ó?"
  ],
  kannada: [
    "‡≤∞‡≥Ä‡≤∏‡≥à‡≤ï‡≥ç‡≤≤‡≤ø‡≤Ç‡≤ó‡≥ç ‡≤®‡≤ø‡≤Ø‡≤Æ‡≤ó‡≤≥‡≥Å?",
    "‡≤ó‡≤æ‡≤ú‡≥Å ‡≤∞‡≥Ä‡≤∏‡≥à‡≤ï‡≥ç‡≤≤‡≤ø‡≤Ç‡≤ó‡≥ç ‡≤π‡≤Ç‡≤§‡≤ó‡≤≥‡≥Å?",
    "‡≤™‡≥ç‡≤≤‡≤æ‡≤∏‡≥ç‡≤ü‡≤ø‡≤ï‡≥ç ‡≤µ‡≤ø‡≤ß‡≤ó‡≤≥‡≥Å ‡≤∞‡≥Ä‡≤∏‡≥à‡≤ï‡≤≤‡≥ç?",
    "‡≤á-‡≤§‡≥ç‡≤Ø‡≤æ‡≤ú‡≥ç‡≤Ø ‡≤µ‡≤ø‡≤≤‡≥á‡≤µ‡≤æ‡≤∞‡≤ø?",
    "‡≤§‡≥ç‡≤Ø‡≤æ‡≤ú‡≥ç‡≤Ø ‡≤ï‡≤°‡≤ø‡≤Æ‡≥Ü ‡≤Æ‡≤æ‡≤°‡≥Å‡≤µ ‡≤∏‡≤≤‡≤π‡≥Ü‡≤ó‡≤≥‡≥Å?",
    "‡≤π‡≤§‡≥ç‡≤§‡≤ø‡≤∞‡≤¶ ‡≤∞‡≥Ä‡≤∏‡≥à‡≤ï‡≥ç‡≤≤‡≤ø‡≤Ç‡≤ó‡≥ç ‡≤ï‡≥á‡≤Ç‡≤¶‡≥ç‡≤∞?",
    "‡≤ï‡≤Ç‡≤™‡≥ã‡≤∏‡≥ç‡≤ü‡≤ø‡≤Ç‡≤ó‡≥ç ‡≤π‡≥á‡≤ó‡≥Ü?",
    "‡≤π‡≤≥‡≥Ü‡≤Ø ‡≤¨‡≤ü‡≥ç‡≤ü‡≥Ü‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤¶‡≤æ‡≤® ‡≤Æ‡≤æ‡≤°‡≤ø?",
    "‡≤ï‡≤æ‡≤ó‡≤¶ ‡≤∞‡≥Ä‡≤∏‡≥à‡≤ï‡≥ç‡≤≤‡≤ø‡≤Ç‡≤ó‡≥ç?",
    "‡≤≤‡≥ã‡≤π ‡≤∞‡≥Ä‡≤∏‡≥à‡≤ï‡≥ç‡≤≤‡≤ø‡≤Ç‡≤ó‡≥ç?"
  ]
};

interface Message {
  sender: 'You' | 'Bot';
  text: string;
}

export default function GeminiChatbot() {
  // Add language state
  const [currentLanguage, setCurrentLanguage] = useState<Language>('english');

  // Get prompts for current language
  const prePrompts = promptsByLanguage[currentLanguage];

  // Language selection message - simple English only
  const languageSelectionMessage = "Welcome to EcoMentor! Please select your preferred language:";

  // Welcome messages in different languages after language selection
  const welcomeMessages = {
    english: "üëã Hello! I'm EcoMentor, your sustainable recycling guide. How can I help you today?",
    hindi: "üëã ‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç EcoMentor ‡§π‡•Ç‡§Ç, ‡§Ü‡§™‡§ï‡§æ ‡§∏‡§∏‡•ç‡§ü‡•á‡§®‡•á‡§¨‡§≤ ‡§∞‡•Ä‡§∏‡§æ‡§á‡§ï‡•ç‡§≤‡§ø‡§Ç‡§ó ‡§ó‡§æ‡§á‡§°‡•§ ‡§Ü‡§ú ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç?",
    kannada: "üëã ‡≤®‡≤Æ‡≤∏‡≥ç‡≤ï‡≤æ‡≤∞! ‡≤®‡≤æ‡≤®‡≥Å EcoMentor, ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤∏‡≥Å‡≤∏‡≥ç‡≤•‡≤ø‡≤∞ ‡≤∞‡≥Ä‡≤∏‡≥à‡≤ï‡≥ç‡≤≤‡≤ø‡≤Ç‡≤ó‡≥ç ‡≤Æ‡≤æ‡≤∞‡≥ç‡≤ó‡≤¶‡≤∞‡≥ç‡≤∂‡≤ø. ‡≤®‡≤æ‡≤®‡≥Å ‡≤®‡≤ø‡≤Æ‡≤ó‡≥Ü ‡≤á‡≤Ç‡≤¶‡≥Å ‡≤π‡≥á‡≤ó‡≥Ü ‡≤∏‡≤π‡≤æ‡≤Ø ‡≤Æ‡≤æ‡≤°‡≤¨‡≤π‡≥Å‡≤¶‡≥Å?"
  };

  // Track if language has been selected
  const [languageSelected, setLanguageSelected] = useState(false);

  const [messages, setMessages] = useState<Message[]>([
    {
      sender: 'Bot',
      text: languageSelectionMessage
    }
  ]);
  const [input, setInput] = useState('');
  const [loading, setLoading] = useState(false);
  const chatRef = useRef<HTMLDivElement>(null);

  const sendMessage = async (msg: string) => {
    setMessages((prev) => [...prev, { sender: 'You', text: msg }]);
    setLoading(true);
    setInput('');
    try {
      const res = await fetch('/api/gemini', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: msg,
          language: currentLanguage
        })
      });
      const data = await res.json();
      setMessages((prev) => [...prev, { sender: 'Bot', text: data.reply }]);
    } catch {
      // Error messages in different languages
      const errorMessages = {
        english: "Sorry, I couldn't get a response.",
        hindi: "‡§ï‡•ç‡§∑‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç, ‡§Æ‡•Å‡§ù‡•á ‡§ï‡•ã‡§à ‡§ú‡§µ‡§æ‡§¨ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§",
        kannada: "‡≤ï‡≥ç‡≤∑‡≤Æ‡≤ø‡≤∏‡≤ø, ‡≤®‡≤®‡≤ó‡≥Ü ‡≤™‡≥ç‡≤∞‡≤§‡≤ø‡≤ï‡≥ç‡≤∞‡≤ø‡≤Ø‡≥Ü ‡≤™‡≤°‡≥Ü‡≤Ø‡≤≤‡≥Å ‡≤∏‡≤æ‡≤ß‡≥ç‡≤Ø‡≤µ‡≤æ‡≤ó‡≤≤‡≤ø‡≤≤‡≥ç‡≤≤."
      };
      setMessages((prev) => [...prev, { sender: 'Bot', text: errorMessages[currentLanguage] }]);
    }
    setLoading(false);
    // Ensure scrolling to bottom after response is received
    setTimeout(() => {
      if (chatRef.current) {
        chatRef.current.scrollTop = chatRef.current.scrollHeight;
      }
    }, 100);
  };

  // Function to select language and show welcome message
  const selectLanguage = (language: Language) => {
    setCurrentLanguage(language);
    setLanguageSelected(true);

    // Add user's language selection as a message
    const languageNames = {
      english: "English",
      hindi: "‡§π‡§ø‡§Ç‡§¶‡•Ä (Hindi)",
      kannada: "‡≤ï‡≤®‡≥ç‡≤®‡≤° (Kannada)"
    };

    // Add both the user selection and the welcome message
    setMessages(prev => [
      ...prev,
      { sender: 'You', text: languageNames[language] },
      { sender: 'Bot', text: welcomeMessages[language] }
    ]);
  };

  useEffect(() => {
    // Scroll to bottom when messages change
    if (chatRef.current) {
      // Use a small timeout to ensure the DOM has updated
      setTimeout(() => {
        if (chatRef.current) {
          chatRef.current.scrollTop = chatRef.current.scrollHeight;
        }
      }, 50);
    }
  }, [messages]);

  return (
    <div className="w-full h-full flex flex-col">
      <div ref={chatRef} className="h-[170px] overflow-y-auto">
        {messages.map((msg, i) => (
          <div key={i} className={`mb-4 ${msg.sender === 'Bot' ? 'text-green-800' : 'text-black'}`}>
            <strong>{msg.sender}:</strong>
            {msg.sender === 'Bot' ? (
              <div className="mt-1 pl-4">
                {msg.text.split('\n').map((line, j) => {
                  const trimmedLine = line.trim();
                  if (!trimmedLine) return null;

                  // Check if line starts with a bullet point or number
                  const isBullet = trimmedLine.startsWith('‚Ä¢') || trimmedLine.startsWith('-') || /^\d+\./.test(trimmedLine);

                  return (
                    <p key={j} className={`mb-2 ${isBullet ? 'flex items-start' : ''}`}>
                      {isBullet ? (
                        <>
                          <span className="text-green-600 mr-2 font-bold">{trimmedLine.charAt(0)}</span>
                          <span>{trimmedLine.substring(1).trim()}</span>
                        </>
                      ) : (
                        trimmedLine
                      )}
                    </p>
                  );
                })}

                {/* Show language selection options for the first message */}
                {i === 0 && !languageSelected ? (
                  <div className="mt-6 flex flex-col gap-4">
                    <button
                      className="text-center px-5 py-4 bg-green-50 hover:bg-green-100 text-green-800 rounded-lg transition-colors w-full font-medium border-2 border-green-300 shadow-md hover:shadow-lg flex items-center justify-center"
                      onClick={() => selectLanguage('english')}
                      disabled={loading}
                    >
                      <span className="mr-3 text-xl">üá¨üáß</span> <span className="text-lg">English</span>
                    </button>
                    <button
                      className="text-center px-5 py-4 bg-green-50 hover:bg-green-100 text-green-800 rounded-lg transition-colors w-full font-medium border-2 border-green-300 shadow-md hover:shadow-lg flex items-center justify-center"
                      onClick={() => selectLanguage('hindi')}
                      disabled={loading}
                    >
                      <span className="mr-3 text-xl">üáÆüá≥</span> <span className="text-lg">‡§π‡§ø‡§Ç‡§¶‡•Ä (Hindi)</span>
                    </button>
                    <button
                      className="text-center px-5 py-4 bg-green-50 hover:bg-green-100 text-green-800 rounded-lg transition-colors w-full font-medium border-2 border-green-300 shadow-md hover:shadow-lg flex items-center justify-center"
                      onClick={() => selectLanguage('kannada')}
                      disabled={loading}
                    >
                      <span className="mr-3 text-xl">üáÆüá≥</span> <span className="text-lg">‡≤ï‡≤®‡≥ç‡≤®‡≤° (Kannada)</span>
                    </button>
                  </div>
                ) : (
                  /* Show pre-prompts after language selection */
                  languageSelected && (
                    <div className="mt-4 grid grid-cols-2 gap-2">
                      {prePrompts.map((prompt, j) => (
                        <button
                          key={j}
                          className="text-left px-3 py-2 bg-green-100 hover:bg-green-200 text-green-800 rounded-lg transition-colors w-full text-xs font-medium border border-green-200 shadow-sm hover:shadow flex items-center"
                          onClick={() => sendMessage(prompt)}
                          disabled={loading}
                        >
                          <span className="mr-1.5 text-xs">üí¨</span> {prompt}
                        </button>
                      ))}
                    </div>
                  )
                )}
              </div>
            ) : (
              <span> {msg.text}</span>
            )}
          </div>
        ))}
        {loading && <div className="text-green-700 font-semibold">Bot: <span className="animate-pulse">...</span></div>}
      </div>

      <div className="flex flex-col">
        <form
          className="flex gap-2"
          onSubmit={e => {
            e.preventDefault();
            if (input.trim()) sendMessage(input.trim());
          }}
        >
          <input
            className="flex-1 border border-green-300 rounded-lg px-3 py-2 shadow-sm focus:outline-none focus:ring-1 focus:ring-green-500 focus:border-transparent"
            type="text"
            value={input}
            onChange={e => setInput(e.target.value)}
            placeholder="Ask a recycling question..."
            disabled={loading}
            style={{ color: '#000', background: '#f8fff8' }}
          />
          <button
            className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition shadow-sm font-medium"
            type="submit"
            disabled={loading}
          >
            Send
          </button>
        </form>

        {/* Reset button - show when there's more than one message */}
        {messages.length > 1 && (
          <button
            onClick={() => {
              // Reset to language selection
              setLanguageSelected(false);
              setMessages([{
                sender: 'Bot',
                text: languageSelectionMessage
              }]);
            }}
            className="text-green-700 text-xs hover:text-green-900 self-end mt-1 flex items-center gap-1 px-2 py-1 rounded hover:bg-green-50 transition-colors"
          >
            <span>üîÑ</span> {
              currentLanguage === 'english' ? 'Start new chat' :
              currentLanguage === 'hindi' ? '‡§®‡§à ‡§ö‡•à‡§ü ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç' :
              '‡≤π‡≥ä‡≤∏ ‡≤ö‡≤æ‡≤ü‡≥ç ‡≤™‡≥ç‡≤∞‡≤æ‡≤∞‡≤Ç‡≤≠‡≤ø‡≤∏‡≤ø'
            }
          </button>
        )}
      </div>
    </div>
  );
}